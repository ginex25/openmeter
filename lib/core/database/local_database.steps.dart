// dart format width=80
import 'package:drift/internal/versioned_schema.dart' as i0;
import 'package:drift/drift.dart' as i1;
import 'package:drift/drift.dart'; // ignore_for_file: type=lint,unused_import

// GENERATED BY drift_dev, DO NOT MODIFY.
final class Schema11 extends i0.VersionedSchema {
  Schema11({required super.database}) : super(version: 11);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    meter,
    entries,
    room,
    meterInRoom,
    provider,
    contract,
    tags,
    meterWithTags,
    costCompare,
    meterContract,
    idxMeterId,
    idxMeterType,
    idxMeterArchived,
    idxEntryMeterId,
    idxEntryId,
    idxRoomId,
    idxRoomUuid,
    idxMeterroomRoomId,
    idxMeterroomMeterId,
    idxContractArchived,
    idxContractId,
    idxContractArchivedTyp,
    idxProviderId,
    idxTagId,
    idxTagUuid,
    idxMetertagMeterId,
    idxMetertagTagId,
    idxCostCompareId,
    idxCostCompareParentId,
  ];
  late final Shape0 meter = Shape0(
      source: i0.VersionedTable(
        entityName: 'meter',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_1,
          _column_2,
          _column_3,
          _column_4,
          _column_5,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape1 entries = Shape1(
      source: i0.VersionedTable(
        entityName: 'entries',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_6,
          _column_7,
          _column_8,
          _column_9,
          _column_10,
          _column_11,
          _column_12,
          _column_13,
          _column_14,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape2 room = Shape2(
      source: i0.VersionedTable(
        entityName: 'room',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_15,
          _column_16,
          _column_1,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape3 meterInRoom = Shape3(
      source: i0.VersionedTable(
        entityName: 'meter_in_room',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(meter_id, room_id)',
        ],
        columns: [
          _column_17,
          _column_18,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape4 provider = Shape4(
      source: i0.VersionedTable(
        entityName: 'provider',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_16,
          _column_19,
          _column_20,
          _column_21,
          _column_22,
          _column_23,
          _column_24,
          _column_25,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape5 contract = Shape5(
      source: i0.VersionedTable(
        entityName: 'contract',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_26,
          _column_27,
          _column_28,
          _column_29,
          _column_30,
          _column_31,
          _column_2,
          _column_4,
          _column_5,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape6 tags = Shape6(
      source: i0.VersionedTable(
        entityName: 'tags',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_15,
          _column_16,
          _column_32,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape7 meterWithTags = Shape7(
      source: i0.VersionedTable(
        entityName: 'meter_with_tags',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(meter_id, tag_id)',
        ],
        columns: [
          _column_17,
          _column_33,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape8 costCompare = Shape8(
      source: i0.VersionedTable(
        entityName: 'cost_compare',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_28,
          _column_29,
          _column_34,
          _column_8,
          _column_35,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape9 meterContract = Shape9(
      source: i0.VersionedTable(
        entityName: 'meter_contract',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(meter_id, contract_id)',
        ],
        columns: [
          _column_17,
          _column_36,
          _column_37,
          _column_38,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  final i1.Index idxMeterId =
      i1.Index('idx_meter_id', 'CREATE INDEX idx_meter_id ON meter (id)');
  final i1.Index idxMeterType =
      i1.Index('idx_meter_type', 'CREATE INDEX idx_meter_type ON meter (typ)');
  final i1.Index idxMeterArchived = i1.Index('idx_meter_archived',
      'CREATE INDEX idx_meter_archived ON meter (is_archived)');
  final i1.Index idxEntryMeterId = i1.Index('idx_entry_meter_id',
      'CREATE INDEX idx_entry_meter_id ON entries (meter)');
  final i1.Index idxEntryId =
      i1.Index('idx_entry_id', 'CREATE INDEX idx_entry_id ON entries (id)');
  final i1.Index idxRoomId =
      i1.Index('idx_room_id', 'CREATE INDEX idx_room_id ON room (id)');
  final i1.Index idxRoomUuid =
      i1.Index('idx_room_uuid', 'CREATE INDEX idx_room_uuid ON room (uuid)');
  final i1.Index idxMeterroomRoomId = i1.Index('idx_meterroom_room_id',
      'CREATE INDEX idx_meterroom_room_id ON meter_in_room (room_id)');
  final i1.Index idxMeterroomMeterId = i1.Index('idx_meterroom_meter_id',
      'CREATE INDEX idx_meterroom_meter_id ON meter_in_room (meter_id)');
  final i1.Index idxContractArchived = i1.Index('idx_contract_archived',
      'CREATE INDEX idx_contract_archived ON contract (is_archived)');
  final i1.Index idxContractId = i1.Index(
      'idx_contract_id', 'CREATE INDEX idx_contract_id ON contract (id)');
  final i1.Index idxContractArchivedTyp = i1.Index('idx_contract_archived_typ',
      'CREATE INDEX idx_contract_archived_typ ON contract (is_archived, meter_typ)');
  final i1.Index idxProviderId = i1.Index(
      'idx_provider_id', 'CREATE INDEX idx_provider_id ON provider (id)');
  final i1.Index idxTagId =
      i1.Index('idx_tag_id', 'CREATE INDEX idx_tag_id ON tags (id)');
  final i1.Index idxTagUuid =
      i1.Index('idx_tag_uuid', 'CREATE INDEX idx_tag_uuid ON tags (uuid)');
  final i1.Index idxMetertagMeterId = i1.Index('idx_metertag_meter_id',
      'CREATE INDEX idx_metertag_meter_id ON meter_with_tags (meter_id)');
  final i1.Index idxMetertagTagId = i1.Index('idx_metertag_tag_id',
      'CREATE INDEX idx_metertag_tag_id ON meter_with_tags (tag_id)');
  final i1.Index idxCostCompareId = i1.Index('idx_cost_compare_id',
      'CREATE INDEX idx_cost_compare_id ON cost_compare (id)');
  final i1.Index idxCostCompareParentId = i1.Index('idx_cost_compare_parent_id',
      'CREATE INDEX idx_cost_compare_parent_id ON cost_compare (parent_id)');
}

class Shape0 extends i0.VersionedTable {
  Shape0({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get typ =>
      columnsByName['typ']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get note =>
      columnsByName['note']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get number =>
      columnsByName['number']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get unit =>
      columnsByName['unit']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get isArchived =>
      columnsByName['is_archived']! as i1.GeneratedColumn<bool>;
}

i1.GeneratedColumn<int> _column_0(String aliasedName) =>
    i1.GeneratedColumn<int>('id', aliasedName, false,
        hasAutoIncrement: true,
        type: i1.DriftSqlType.int,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
i1.GeneratedColumn<String> _column_1(String aliasedName) =>
    i1.GeneratedColumn<String>('typ', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_2(String aliasedName) =>
    i1.GeneratedColumn<String>('note', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_3(String aliasedName) =>
    i1.GeneratedColumn<String>('number', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_4(String aliasedName) =>
    i1.GeneratedColumn<String>('unit', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<bool> _column_5(String aliasedName) =>
    i1.GeneratedColumn<bool>('is_archived', aliasedName, false,
        type: i1.DriftSqlType.bool,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'CHECK ("is_archived" IN (0, 1))'),
        defaultValue: const CustomExpression('0'));

class Shape1 extends i0.VersionedTable {
  Shape1({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get meter =>
      columnsByName['meter']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get count =>
      columnsByName['count']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get usage =>
      columnsByName['usage']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<DateTime> get date =>
      columnsByName['date']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<int> get days =>
      columnsByName['days']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get note =>
      columnsByName['note']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get isReset =>
      columnsByName['is_reset']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<bool> get transmittedToProvider =>
      columnsByName['transmitted_to_provider']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<String> get imagePath =>
      columnsByName['image_path']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<int> _column_6(String aliasedName) =>
    i1.GeneratedColumn<int>('meter', aliasedName, false,
        type: i1.DriftSqlType.int,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'REFERENCES meter (id) ON DELETE CASCADE'));
i1.GeneratedColumn<int> _column_7(String aliasedName) =>
    i1.GeneratedColumn<int>('count', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<int> _column_8(String aliasedName) =>
    i1.GeneratedColumn<int>('usage', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<DateTime> _column_9(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('date', aliasedName, false,
        type: i1.DriftSqlType.dateTime);
i1.GeneratedColumn<int> _column_10(String aliasedName) =>
    i1.GeneratedColumn<int>('days', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<String> _column_11(String aliasedName) =>
    i1.GeneratedColumn<String>('note', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<bool> _column_12(String aliasedName) =>
    i1.GeneratedColumn<bool>('is_reset', aliasedName, false,
        type: i1.DriftSqlType.bool,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'CHECK ("is_reset" IN (0, 1))'),
        defaultValue: const CustomExpression('0'));
i1.GeneratedColumn<bool> _column_13(String aliasedName) =>
    i1.GeneratedColumn<bool>('transmitted_to_provider', aliasedName, false,
        type: i1.DriftSqlType.bool,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'CHECK ("transmitted_to_provider" IN (0, 1))'),
        defaultValue: const CustomExpression('0'));
i1.GeneratedColumn<String> _column_14(String aliasedName) =>
    i1.GeneratedColumn<String>('image_path', aliasedName, true,
        type: i1.DriftSqlType.string);

class Shape2 extends i0.VersionedTable {
  Shape2({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get uuid =>
      columnsByName['uuid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get typ =>
      columnsByName['typ']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_15(String aliasedName) =>
    i1.GeneratedColumn<String>('uuid', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_16(String aliasedName) =>
    i1.GeneratedColumn<String>('name', aliasedName, false,
        type: i1.DriftSqlType.string);

class Shape3 extends i0.VersionedTable {
  Shape3({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get meterId =>
      columnsByName['meter_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get roomId =>
      columnsByName['room_id']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<int> _column_17(String aliasedName) =>
    i1.GeneratedColumn<int>('meter_id', aliasedName, false,
        type: i1.DriftSqlType.int,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'REFERENCES meter (id) ON DELETE CASCADE'));
i1.GeneratedColumn<String> _column_18(String aliasedName) =>
    i1.GeneratedColumn<String>('room_id', aliasedName, false,
        type: i1.DriftSqlType.string);

class Shape4 extends i0.VersionedTable {
  Shape4({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get contractNumber =>
      columnsByName['contract_number']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get notice =>
      columnsByName['notice']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<DateTime> get validFrom =>
      columnsByName['valid_from']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get validUntil =>
      columnsByName['valid_until']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<int> get renewal =>
      columnsByName['renewal']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<bool> get canceled =>
      columnsByName['canceled']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<DateTime> get canceledDate =>
      columnsByName['canceled_date']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<String> _column_19(String aliasedName) =>
    i1.GeneratedColumn<String>('contract_number', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<int> _column_20(String aliasedName) =>
    i1.GeneratedColumn<int>('notice', aliasedName, true,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<DateTime> _column_21(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('valid_from', aliasedName, false,
        type: i1.DriftSqlType.dateTime);
i1.GeneratedColumn<DateTime> _column_22(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('valid_until', aliasedName, false,
        type: i1.DriftSqlType.dateTime);
i1.GeneratedColumn<int> _column_23(String aliasedName) =>
    i1.GeneratedColumn<int>('renewal', aliasedName, true,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<bool> _column_24(String aliasedName) =>
    i1.GeneratedColumn<bool>('canceled', aliasedName, true,
        type: i1.DriftSqlType.bool,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'CHECK ("canceled" IN (0, 1))'));
i1.GeneratedColumn<DateTime> _column_25(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('canceled_date', aliasedName, true,
        type: i1.DriftSqlType.dateTime);

class Shape5 extends i0.VersionedTable {
  Shape5({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get meterTyp =>
      columnsByName['meter_typ']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get provider =>
      columnsByName['provider']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<double> get basicPrice =>
      columnsByName['basic_price']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<double> get energyPrice =>
      columnsByName['energy_price']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<double> get discount =>
      columnsByName['discount']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<int> get bonus =>
      columnsByName['bonus']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get note =>
      columnsByName['note']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get unit =>
      columnsByName['unit']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get isArchived =>
      columnsByName['is_archived']! as i1.GeneratedColumn<bool>;
}

i1.GeneratedColumn<String> _column_26(String aliasedName) =>
    i1.GeneratedColumn<String>('meter_typ', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<int> _column_27(String aliasedName) =>
    i1.GeneratedColumn<int>('provider', aliasedName, true,
        type: i1.DriftSqlType.int,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'REFERENCES provider (id) ON DELETE SET NULL'));
i1.GeneratedColumn<double> _column_28(String aliasedName) =>
    i1.GeneratedColumn<double>('basic_price', aliasedName, false,
        type: i1.DriftSqlType.double);
i1.GeneratedColumn<double> _column_29(String aliasedName) =>
    i1.GeneratedColumn<double>('energy_price', aliasedName, false,
        type: i1.DriftSqlType.double);
i1.GeneratedColumn<double> _column_30(String aliasedName) =>
    i1.GeneratedColumn<double>('discount', aliasedName, false,
        type: i1.DriftSqlType.double);
i1.GeneratedColumn<int> _column_31(String aliasedName) =>
    i1.GeneratedColumn<int>('bonus', aliasedName, true,
        type: i1.DriftSqlType.int);

class Shape6 extends i0.VersionedTable {
  Shape6({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get uuid =>
      columnsByName['uuid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get color =>
      columnsByName['color']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<int> _column_32(String aliasedName) =>
    i1.GeneratedColumn<int>('color', aliasedName, false,
        type: i1.DriftSqlType.int);

class Shape7 extends i0.VersionedTable {
  Shape7({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get meterId =>
      columnsByName['meter_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get tagId =>
      columnsByName['tag_id']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_33(String aliasedName) =>
    i1.GeneratedColumn<String>('tag_id', aliasedName, false,
        type: i1.DriftSqlType.string);

class Shape8 extends i0.VersionedTable {
  Shape8({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<double> get basicPrice =>
      columnsByName['basic_price']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<double> get energyPrice =>
      columnsByName['energy_price']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<int> get bonus =>
      columnsByName['bonus']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get usage =>
      columnsByName['usage']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get parentId =>
      columnsByName['parent_id']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<int> _column_34(String aliasedName) =>
    i1.GeneratedColumn<int>('bonus', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<int> _column_35(String aliasedName) =>
    i1.GeneratedColumn<int>('parent_id', aliasedName, false,
        type: i1.DriftSqlType.int,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'REFERENCES contract (id) ON DELETE CASCADE'));

class Shape9 extends i0.VersionedTable {
  Shape9({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get meterId =>
      columnsByName['meter_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get contractId =>
      columnsByName['contract_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<DateTime> get startDate =>
      columnsByName['start_date']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get endDate =>
      columnsByName['end_date']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<int> _column_36(String aliasedName) =>
    i1.GeneratedColumn<int>('contract_id', aliasedName, false,
        type: i1.DriftSqlType.int,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'REFERENCES contract (id) ON DELETE CASCADE'));
i1.GeneratedColumn<DateTime> _column_37(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('start_date', aliasedName, true,
        type: i1.DriftSqlType.dateTime);
i1.GeneratedColumn<DateTime> _column_38(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('end_date', aliasedName, true,
        type: i1.DriftSqlType.dateTime);
i0.MigrationStepWithVersion migrationSteps({
  required Future<void> Function(i1.Migrator m, Schema11 schema) from10To11,
}) {
  return (currentVersion, database) async {
    switch (currentVersion) {
      case 10:
        final schema = Schema11(database: database);
        final migrator = i1.Migrator(database, schema);
        await from10To11(migrator, schema);
        return 11;
      default:
        throw ArgumentError.value('Unknown migration from $currentVersion');
    }
  };
}

i1.OnUpgrade stepByStep({
  required Future<void> Function(i1.Migrator m, Schema11 schema) from10To11,
}) =>
    i0.VersionedSchema.stepByStepHelper(
        step: migrationSteps(
      from10To11: from10To11,
    ));
